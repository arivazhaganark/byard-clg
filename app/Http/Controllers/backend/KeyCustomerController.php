<?php

namespace App\Http\Controllers\backend;

use Illuminate\Http\Request;
use Intervention\Image\Facades\Image as Image;
use App\Http\Requests;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Input;
use App\Model\backend\CustomerKeyModel;
use App\Model\backend\LicenseInterfaceModel;
use App\Model\backend\CustomerModel;
use App\Model\backend\CustomerKeyMapModel;
use App\Model\backend\CustomerKeyUsedModel;
use Redirect;
use Session;
use DB;


class KeyCustomerController extends Controller
{
     
    public function index(){
        $input = Input::all(); 
        if (isset($input['token']) && $input['token'] == 'inactive') {
           $KeyCustomerAll = CustomerKeyModel::leftJoin('atnetwork_customer_master','atnetwork_customer_key_master.cus_id','=','atnetwork_customer_master.cus_id')
                 ->where('atnetwork_customer_key_master.active',0)
                 ->get(array('atnetwork_customer_master.c_name','atnetwork_customer_master.c_id','atnetwork_customer_key_master.cus_key_id'));
        
        } else {

            $KeyCustomerAll = CustomerKeyModel::leftJoin('atnetwork_customer_master','atnetwork_customer_key_master.cus_id','=','atnetwork_customer_master.cus_id')
                 ->where('atnetwork_customer_key_master.active',1)
                 ->get(array('atnetwork_customer_master.c_name','atnetwork_customer_master.c_id','atnetwork_customer_key_master.cus_key_id'));
            

        }
        $active_count = CustomerKeyModel::where('active', 1)->count();
        $inactive_count = CustomerKeyModel::where('active', 0)->count();
       return view('backend.keycustomer.index', compact('KeyCustomerAll', 'active_count', 'inactive_count'));
    }

    public function create() {
        /** Get customer id **/
        $customerId = CustomerModel::select('cus_id','c_name','c_id')->where('active', 1)->get();
        /** Get Lincence **/
        $LicenseInterface= LicenseInterfaceModel::select('lin_id','interface_name')->where('active', 1)->get();
     return view('backend.keycustomer.add',compact('customerId','LicenseInterface'));
    }
    

       public function store(Request $request) {


         $inputs=$request->all();
         $CusIdKey=$inputs['selectKey'];
         $hiddCkBox=$inputs['hiddCkBox'];
         $licenceArr=explode(',',$hiddCkBox);
         
        
          $GetKeyUserUniqueCnt = CustomerKeyModel:: where(['cus_id' => "$CusIdKey"])->get()->count();
         
         if($GetKeyUserUniqueCnt==0 )
         {

            if(sizeof($licenceArr)>0)
            {

                
                     $data = CustomerKeyModel::create([
                     'cus_id' => $CusIdKey,
                     ]);

                     $primaryKeyId=$data->id;

                if($primaryKeyId>0)
                {

                        for($i=0;$i<sizeof($licenceArr);$i++)
                        {
                            $RandKey=$this->generateRandomString(16);
                            $GetKeyUniqueCnt=CustomerKeyMapModel:: where(['package_key' => "$RandKey"])->get()->count();

                            if($GetKeyUniqueCnt==0)
                            {

                            $licenceTypeId=$licenceArr[$i];
                            $MaxInputVal=$inputs['type_'.$licenceArr[$i]];

                            $Childdata = CustomerKeyMapModel::create([
                             'cus_key_id'=>$primaryKeyId,   
                             'lin_id' => $licenceTypeId,
                             'package_max_cnt' =>$MaxInputVal,
                             'package_key' =>$RandKey
                             
                             ]);
                           }
    
                       }

                        Session::flash('message', 'Key generated successfully.');
                        Session::flash('alert-class', 'alert-success');

                } 
                else
                {

                    Session::flash('message', 'Invalid request, please try again.');
                    Session::flash('alert-class', 'alert-warning');
                }

             

         }
         else
         {
            Session::flash('message', 'Invalid request, please try again.');
            Session::flash('alert-class', 'alert-warning');

         }

         }
         else
         {

             
                Session::flash('message', 'Key already generated by this customer .');
                Session::flash('alert-class', 'alert-warning');
             
         }
        return Redirect::to('admin/keycustomer/add');
   
}

     

    public function edit($cus_id){


        $KeyViewCustomerAll = CustomerKeyModel::leftJoin('atnetwork_customer_master','atnetwork_customer_key_master.cus_id','=','atnetwork_customer_master.cus_id')
                 ->where('atnetwork_customer_key_master.cus_key_id',$cus_id)
                 ->get(array('atnetwork_customer_master.c_name',
                             'atnetwork_customer_master.c_id',
                             'atnetwork_customer_key_master.cus_key_id',
                             'atnetwork_customer_master.c_name',
                             'atnetwork_customer_master.c_id', 
                             'atnetwork_customer_master.email_id',
                              DB::raw('""  as Voice'),
                              DB::raw('""  as Voice_S'),
                              DB::raw('""  as Voice_Video'),
                              DB::raw('""  as Voice_Video_Screen'),
                              DB::raw('""  as Used_Voice'),
                              DB::raw('""  as Used_Voice_S'),
                              DB::raw('""  as Used_Voice_Video'),
                              DB::raw('""  as Used_Voice_Video_Screen'),



                              ));

     $KeyMappVal=CustomerKeyMapModel::select('cus_key_id', 'lin_id', 'package_max_cnt')->where('cus_key_id',$cus_id)->get() ; 
  
    
      foreach ($KeyMappVal as $key => $value) {

        $mapCusId=$value->cus_key_id;
        $mapLicenceId=$value->lin_id;

        $GetKeyUsed = CustomerKeyUsedModel:: where(['cus_id' => "$mapCusId","lin_id"=>"$mapLicenceId"])->get()->count();

     
         if($value->lin_id==1)
         {
            $KeyViewCustomerAll[0]->Voice=$value->package_max_cnt;
            $KeyViewCustomerAll[0]->Used_Voice=$GetKeyUsed;

         }
         elseif($value->lin_id==2)
         {
           $KeyViewCustomerAll[0]->Voice_S=$value->package_max_cnt;
           $KeyViewCustomerAll[0]->Used_Voice_S=$GetKeyUsed;

         }
         elseif($value->lin_id==3)
         {
            $KeyViewCustomerAll[0]->Voice_Video=$value->package_max_cnt;
            $KeyViewCustomerAll[0]->Used_Voice_Video=$GetKeyUsed;
         }
         elseif($value->lin_id==4)
         {
            $KeyViewCustomerAll[0]->Voice_Video_Screen=$value->package_max_cnt;
            $KeyViewCustomerAll[0]->Used_Voice_Video_Screen=$GetKeyUsed;
         }
              
      } 

   	 $LicenseInterface=LicenseInterfaceModel::select('lin_id','interface_name')->where('active', 1)->get();
        return view('backend.keycustomer.edit', compact('KeyViewCustomerAll','LicenseInterface','cus_id'));



    }

     public function update(Request $request) {


         $id = $request->get('hidid');
         $licenceId=$request->get('licenceVal');
         $textBoxMaxVal=$request->get('type_'.$licenceId);  
         if($id>0 && $licenceId>0 && $textBoxMaxVal>0)
         {

            $getLicenceCnt=CustomerKeyModel::leftJoin('atnetwork_customer_key_mapping','atnetwork_customer_key_mapping.cus_key_id','=','atnetwork_customer_key_master.cus_key_id')
                ->where('atnetwork_customer_key_master.cus_key_id',$id)
                ->where('atnetwork_customer_key_mapping.lin_id',$licenceId)->get()->count();

             if($getLicenceCnt>0) //already existing need update only 
             {

             
              $getLicenceMax=CustomerKeyModel::leftJoin('atnetwork_customer_key_mapping','atnetwork_customer_key_mapping.cus_key_id','=','atnetwork_customer_key_master.cus_key_id')
                ->where('atnetwork_customer_key_master.cus_key_id',$id)
                ->where('atnetwork_customer_key_mapping.lin_id',$licenceId)->get(array('atnetwork_customer_key_mapping.package_max_cnt'));

                 $LastMaxCnt=$getLicenceMax[0]->package_max_cnt ;

                if($textBoxMaxVal>=$LastMaxCnt)
                {

                    if($textBoxMaxVal != $LastMaxCnt)
                    {
                       $updateCus=CustomerKeyMapModel::where('cus_key_id',$id)->where('lin_id',$licenceId)
                        ->update(["package_max_cnt"=> "$textBoxMaxVal"]);
                       echo 'Value successfully updated'; //success
                    }
                    else
                    {

                        
                        echo 'Value successfully updated'; //success
                       
                    }
                      
                }
                else
                {
                    $GetKeyUsed = CustomerKeyUsedModel:: where(['cus_id' => "$id","lin_id"=>"$licenceId"])->get()->count();
                    if($GetKeyUsed>0)
                    {

                      $getResVal=$GetKeyUsed-$textBoxMaxVal;

                      if($getResVal>0)
                      { 
                        echo  "Used count is exceeded";

                      }
                      else
                      {

                        $updateCus=CustomerKeyMapModel::where('cus_key_id',$id)->where('lin_id',$licenceId)
                        ->update(["package_max_cnt"=> "$textBoxMaxVal"]);
                         echo 'Value successfully updated'; //success

                         //echo 'no'.$getResVal;
                      }
                        // if($GetKeyUsed>$textBoxMaxVal)
                        // {

                        // }
                       // echo $getResVal;
                        //exit;

                    }
                    else
                    {

                        $updateCus=CustomerKeyMapModel::where('cus_key_id',$id)->where('lin_id',$licenceId)
                        ->update(["package_max_cnt"=> "$textBoxMaxVal"]);
                        echo 'Value successfully updated'; //success

                    }



                }





             }
             else{ //insert licence 


                $RandKey=$this->generateRandomString(16);
                $GetKeyUniqueCnt=CustomerKeyMapModel:: where(['package_key' => "$RandKey"])->get()->count();

                if($GetKeyUniqueCnt==0)
                {

                  
                $Childdata = CustomerKeyMapModel::create([
                'cus_key_id'=>$id,   
                'lin_id' => $licenceId,
                'package_max_cnt' =>$textBoxMaxVal,
                'package_key' =>$RandKey

                ]);

                echo 'Value inserted successfully';
                }
                else
                {

                    echo 'Please try again.'; //invali random key ples try again
                }


 
             }   

                

         }
         else
         {

            echo 'Please try again.';
         }

       //  echo $id.'  '. $licenceId;
         //CustomerKeyUsedModel
    //     $cName=$request->get('iname');
    //     $cMail=$request->get('emailid');
       
    //     $GetMailUnique = CustomerModel:: where(['email_id' => "$cMail"])->whereNotIn('cus_id', [$id])->get()->count();
    //     if($GetMailUnique==0)
    //     {

    //         $updateCus=CustomerModel::where('cus_id', $id)
    //                   ->update(["c_name"=> "$cName","email_id"=>"$cMail"]);

    //         Session::flash('message', 'Updated successfully');
    //         Session::flash('alert-class', 'alert-success');
    //          return redirect('admin/customer') ;          


    //     }
    //     else
    //     {

    //       Session::flash('message', 'Mail is already exists');
    //         Session::flash('alert-class', 'alert-warning');
    //     }

        
    }

    public function actionupdate(Request $request) {
        $inputs = $request->all();
        $updated_ids_value = explode(",", $inputs['hid_selected_ids']);
        $column_name = "active";
        $action = $inputs['action'];
        if ($action == 'Inactive') {
            
            $action_value = "0";
            $msg_value = "Key has been successfully inactivated.";
            $redirect_value = "admin/keycustomer";
            
        } else if ($action == 'Active') {
            
            $action_value = "1";
            $msg_value = "Key has been successfully activated.";
            $redirect_value = "admin/keycustomer/?token=inactive";
        }
        else
        {

            $msg_value="Invalid request";
        }
            
        
        foreach ($updated_ids_value as $update_id) {
            if ($action != 'Delete') {
                $data = array(
                    $column_name => $action_value
                );
                CustomerKeyModel::select('*')->where('cus_key_id', $update_id)->update($data);
                
            }  
        }
        Session::flash('message', $msg_value);
        Session::flash('alert-class', 'alert-success');
        return Redirect::to($redirect_value);
    }
    public function show($id) {


    $KeyViewCustomerAll = CustomerKeyModel::leftJoin('atnetwork_customer_master','atnetwork_customer_key_master.cus_id','=','atnetwork_customer_master.cus_id')
                 ->where('atnetwork_customer_key_master.cus_key_id',$id)
                 ->get(array('atnetwork_customer_master.c_name',
                             'atnetwork_customer_master.c_id',
                             'atnetwork_customer_key_master.cus_key_id',
                              
                             'atnetwork_customer_master.c_name',
                             'atnetwork_customer_master.c_id', 
                             'atnetwork_customer_master.email_id',
                              DB::raw('""  as Voice'),
                              DB::raw('""  as Voice_S'),
                              DB::raw('""  as Voice_Video'),
                              DB::raw('""  as Voice_Video_Screen')));

     $KeyMappVal=CustomerKeyMapModel::select('cus_key_id', 'lin_id','package_key', 'package_max_cnt')->where('cus_key_id',$id)->get() ; 
  
    
      foreach ($KeyMappVal as $key => $value) {

         $keyPack='';
         if($value->lin_id==1)
         { 

            $GetKeyUsedCnt = CustomerKeyUsedModel:: where(['cus_id' => "$id","lin_id"=>$value->lin_id])->get()->count();
 
            $keyPack= substr($value->package_key, 0, 4)."-".substr($value->package_key, 4, 4)."-".substr($value->package_key,8,4).'-'.substr($value->package_key,12,4);
            $KeyViewCustomerAll[0]->Voice=$keyPack.'   (Total='.$value->package_max_cnt.'  Used='.$GetKeyUsedCnt.')';
         }
         elseif($value->lin_id==2)
         {
            $GetKeyUsedCnt = CustomerKeyUsedModel:: where(['cus_id' => "$id","lin_id"=>$value->lin_id])->get()->count();
            $keyPack= substr($value->package_key, 0, 4)."-".substr($value->package_key, 4, 4)."-".substr($value->package_key,8,4).'-'.substr($value->package_key,12,4); 
           $KeyViewCustomerAll[0]->Voice_S=$keyPack.'   (Total='.$value->package_max_cnt.'  Used='.$GetKeyUsedCnt.')';
         }
         elseif($value->lin_id==3)
         {
            $GetKeyUsedCnt = CustomerKeyUsedModel:: where(['cus_id' => "$id","lin_id"=>$value->lin_id])->get()->count();
             $keyPack= substr($value->package_key, 0, 4)."-".substr($value->package_key, 4, 4)."-".substr($value->package_key,8,4).'-'.substr($value->package_key,12,4);
            $KeyViewCustomerAll[0]->Voice_Video=$keyPack.'   (Total='.$value->package_max_cnt.'   Used='.$GetKeyUsedCnt.')';
         }
         elseif($value->lin_id==4)
         {
             $GetKeyUsedCnt = CustomerKeyUsedModel:: where(['cus_id' => "$id","lin_id"=>$value->lin_id])->get()->count();
             $keyPack= substr($value->package_key, 0, 4)."-".substr($value->package_key, 4, 4)."-".substr($value->package_key,8,4).'-'.substr($value->package_key,12,4);
            $KeyViewCustomerAll[0]->Voice_Video_Screen=$keyPack.'   (Total='.$value->package_max_cnt.'   Used='.$GetKeyUsedCnt.')';
         }




                     
             }           

                 
 
         
           return view('backend.keycustomer.show', compact('KeyViewCustomerAll'));
    }

     
    public function generateRandomString($length) {
        $characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
     }



}
